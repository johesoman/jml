%{



open Lang



%}



%token <string> STRING
%token <string> NAME
%token <string> ID
%token <int> INT
%token PLUSPLUS
%token ATSIGN
%token MATCH
%token TYPE
%token BAR
%token COLONCOLON
%token LBRACK
%token RBRACK
%token LBRACE
%token RBRACE
%token COMMA
%token END
%token DOT
%token AND
%token REF
%token REFASN
%token COLON
%token SEMI
%token FALSE
%token TRUE
%token EOF
%token LET
%token REC
%token IN
%token IF
%token THEN
%token ELSE
%token FUN
%token ARROW
%token FATARROW
%token DEREF
%token LPAR
%token RPAR
%token EQEQOP
%token EQOP
%token NEOP
%token LTOP
%token GTOP
%token LEOP
%token GEOP
%token OROP
%token ANDOP
%token ADDOP
%token SUBOP
%token MULOP
%token DIVOP



%start start
%type <AST> start



%%



// +++++++++
// + start +
// +++++++++



start: prog { $1 }



prog:
  | expr1 { Expr $1 }
  | tops  { match $1 with
            | [] -> Empty
            | _  -> Prgm (Array.ofList $1)
          }
  | EOF   { Empty }



// +++++++++
// + types +
// +++++++++



arrowSepType2:
  | ARROW type2 arrowSepType2 { $2 :: $3 }
  |                           { [] }



commaSepType1:
  | COMMA type1 commaSepType1 { $2 :: $3 }
  |                           { [] }



type1:
  | type3 ARROW type3 arrowSepType2
      { Array.ofList ($1 :: $3 :: $4) |> TFun }

  | type2 { $1 }



type2:
  | REF type3 { TRef $2 }
  | type3     { $1 }



type3:
  | LPAR type1 RPAR { $2 }

  | LPAR type1 COMMA type1 commaSepType1 RPAR
      { Array.ofList ($2 :: $4 :: $5) |> TTuple }

  | LPAR RPAR { TUnit }

  | NAME      { match $1 with
                | "Int"    -> TInt
                | "Bool"   -> TBool
                | "String" -> TString
                | s        -> TUser s
              }

  | LBRACK type1 RBRACK { TList $2 }



parameter:
  | LPAR ID COLON type1 RPAR { Typed ($2, $4) }
  | ID                       { Untyped $1 }



parameters:
  | parameter parameters { $1 :: $2 }
  |                      { [] }



returnType:
   | COLON type1 { $2 }
   |             { TUnknown }



recDefRec:
  | COMMA ID COLON type1 recDefRec { ($2, $4) :: $5 }
  |                                { [] }



variantCase:
  | NAME COLON type1 { match $3 with
                       | TTuple a -> ($1, a)
                       | t        -> ($1, [|t|])
                     }
  | NAME             { ($1, [||]) }



variantRec:
  | BAR variantCase variantRec { $2 :: $3 }
  |                            { [] }



typeDef:
  | TYPE NAME EQOP LBRACE ID COLON type1 recDefRec RBRACE
      { EDefRecord($2, Array.ofList (($5, $7) ::$8)) }

  | TYPE NAME EQOP     variantCase variantRec
      { EDefADT ($2, Array.ofList ($4 :: $5)) }

  | TYPE NAME EQOP BAR variantCase variantRec
      { EDefADT ($2, Array.ofList ($5 :: $6)) }



// +++++++
// + top +
// +++++++



tops:
  | topLet  tops { $1 :: $2 }
  | typeDef tops { $1 :: $2 }
  |              { [] }



topLet:
  | LET     ID parameters returnType EQOP expr1
      { ETopLet   ($2, Array.ofList $3, $4, $6) }

  | LET REC ID parameters returnType EQOP expr1
      { ETopLetRec($3, Array.ofList $4, $5, $7) }



// +++++++++++++++
// + expressions +
// +++++++++++++++



manyMatchCase:
  | BAR pat1 ARROW expr1 manyMatchCase { ($2, $4) :: $5 }
  |                                    { [] }



expr1:
  | LET ID parameters returnType EQOP expr1 IN expr1
      { ELet   ($2, Array.ofList $3, $4, $6, $8) }

  | REC ID parameters returnType EQOP expr1 IN expr1
      { ELetRec($2, Array.ofList $3, $4, $6, $8) }

  | FUN parameter parameters ARROW expr1
      { ELambda(Array.ofList ($2 :: $3), $5)}

  | MATCH LPAR expr1 RPAR LBRACE     pat1 ARROW expr1 manyMatchCase RBRACE
      { EMatch ($3, Array.ofList (($6, $8) :: $9)) }

  | MATCH LPAR expr1 RPAR LBRACE BAR pat1 ARROW expr1 manyMatchCase RBRACE
      { EMatch ($3, Array.ofList (($7, $9) :: $10)) }

  | IF expr1 THEN expr1 ELSE expr1 { EIf ($2, $4, $6) }

  | expr2 { $1 }



semiSepExpr3:
  | SEMI expr3 semiSepExpr3 { $2 :: $3 }
  |                         { [] }



expr2:
  | expr3 SEMI { ESeq [|$1; EUnit|]}

  | expr3 SEMI expr3 semiSepExpr3
      { Array.ofList ($1 :: $3 :: $4) |> ESeq }

  | expr3 { $1 }


expr3:
  | expr4 REFASN expr3 { EBop ($1, RefAsn, $3) }
  | expr4              { $1 }



expr4:
  | expr4  OROP expr5 { EBop($1, Or, $3) }
  | expr5             { $1 }



expr5:
  | expr5 ANDOP expr6 { EBop($1, And, $3) }
  | expr6             { $1 }



expr6:
  | expr6 EQOP expr7 { EBop($1, Eq, $3) }
  | expr6 NEOP expr7 { EBop($1, Ne, $3) }
  | expr6 LTOP expr7 { EBop($1, Lt, $3) }
  | expr6 GTOP expr7 { EBop($1, Gt, $3) }
  | expr6 LEOP expr7 { EBop($1, Le, $3) }
  | expr6 GEOP expr7 { EBop($1, Ge, $3) }
  | expr7            { $1 }



expr7:
  | expr7  ATSIGN   expr8 { EBop($1, ListConcat  , $3) }
  | expr7  PLUSPLUS expr8 { EBop($1, StringConcat, $3) }
  | expr8                 { $1 }



expr8:
  | expr9 COLONCOLON expr8 { EBop($1, ListCons, $3) }
  | expr9                  { $1 }



expr9:
  | expr9 ADDOP expr10 { EBop($1, Add, $3) }
  | expr9 SUBOP expr10 { EBop($1, Sub, $3) }
  | expr10             { $1 }



expr10:
  | expr10 MULOP expr11 { EBop($1, Mul, $3) }
  | expr10 DIVOP expr11 { EBop($1, Div, $3) }
  | expr11              { $1 }



expr11:
  | expr11 expr12 { EApp ($1, $2) }
  | REF    expr12 { ERefLit $2 }
  | DEREF  expr12 { EDeRef $2 }
  | expr12        { $1 }



expr12:
  | expr12 DOT ID                  { EProjRec ($1, $3) }
  | expr12 DOT LBRACK expr1 RBRACK { EProjAgg ($1, $4) }
  | expr13                         { $1 }



commaSepExpr1:
  | COMMA expr1 commaSepExpr1 { $2 :: $3 }
  |                           { [] }



recordRow:
  | ID EQOP expr1 { ($1, $3) }



commaSepRecordRow:
  | COMMA recordRow commaSepRecordRow { $2 :: $3 }
  |                                   { [] }



expr13:
  | LPAR expr1 RPAR { $2 }
  | LPAR RPAR       { EUnit }
  | FALSE           { EBool false }
  | TRUE            { EBool true }
  | INT             { EInt $1 }
  | ID              { EVar $1 }
  | STRING          { EString $1 }
  | NAME            { EConstructor $1 }

  | LPAR expr1 COMMA expr1 commaSepExpr1 RPAR
      { Array.ofList ($2 :: $4 :: $5) |> ETuple }

  | LBRACK RBRACK { EList [||] }

  | LBRACK expr1 commaSepExpr1 RBRACK { Array.ofList ($2 :: $3) |> EList }

  | LBRACE recordRow commaSepRecordRow RBRACE
      { Array.ofList ($2 :: $3) |> ERecordLit }




// ++++++++++++
// + patterns +
// ++++++++++++



pat1:
  | pat1 COLONCOLON pat2 { PListCons ($1, $3) }
  | pat2                 { $1 }




pat2:
  | NAME pat3 { match $2 with
                | PTuple ps -> PADT ($1, ps)
                | p         -> PADT ($1, [|p|])
              }
  | NAME      { PADT ($1, [||]) }
  | pat3      { $1 }



commaSepPat1:
  | COMMA pat1 commaSepPat1 { $2 :: $3 }
  |                         { [] }



pat3:
  | LPAR pat1 RPAR { $2 }
  | LBRACK RBRACK  { PList [||] }
  | LPAR RPAR      { PUnit }
  | STRING         { PString $1 }
  | FALSE          { PBool false }
  | TRUE           { PBool true }
  | INT            { PInt $1 }
  | ID             { PVar $1 }

  | LBRACK pat1 commaSepPat1 RBRACK
      { Array.ofList ($2 :: $3) |> PList }

  | LPAR pat1 COMMA pat1 commaSepPat1 RPAR
      { Array.ofList ($2 :: $4 :: $5) |> PTuple }



%%
